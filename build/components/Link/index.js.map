{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/Link/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAA;AAC1C,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,cAAc,CAAA;AACrD,OAAO,UAAU,MAAM,yBAAyB,CAAA;AAChD,OAAO,KAAK,MAAM,mBAAmB,CAAA;AAGrC,iGAAiG;AAEjG;;;;;;;;;;;;;;;;;;;;;GAqBG;AAEH,MAAM,SAAS,GAAG,GAId,EAAE,CACJ,KAAK,CAAC,UAAU,CACd,CAAC,KAAyC,EAAE,GAAqB,EAAE,EAAE;IACnE,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,EAAE,CAAA;IACjC,MAAM,EACJ,qBAAqB,GAAG,KAAK,CAAC,MAAM,EACpC,SAAS,EACT,MAAM,EACN,QAAQ,EACR,MAAM,GAAG,IAAI,GACd,GAAG,KAAK,CAAA;IAET,MAAM,GAAG,GAAG,WAAW,CACrB,GAAG,EAAE,CACH,QAAQ,CAAC;QACP,SAAS,EAAE,SAAS,IAAI,GAAG;QAC3B,MAAM;KACP,CAAC,EACJ,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAC9B,CAAA;IAED,OAAO,CACL,CAAC,gBAAgB,CAAC,IAAI,qBAAqB,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CACxD;UAAA,CAAC,MAAM,CAAC,CAAC,CAAC,CACR,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,MAAM,CACzD;cAAA,CAAC,QAAQ,CACX;YAAA,EAAE,IAAI,CAAC,CACR,CAAC,CAAC,CAAC,CACF,QAAQ,CACT,CACH;QAAA,EAAE,gBAAgB,CAAC,CACpB,CAAA;AACH,CAAC,CACF,CAAA;AAEH,eAAe,SAAS,CAAA","sourcesContent":["import React, { useCallback } from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\nimport useRouting from '../../hooks/use-routing'\nimport empty from '../../utils/empty'\nimport { LinkProps } from '..'\n\n// I made this an \"HOC\" of sorts to let us both use TS generics for each lib and React.forwardRef\n\n/**\n * Example usage from expo-gatsby-navigation\n *\n * ```es6\n * import React from 'react'\n * import { LinkMaker, LinkProps } from 'expo-navigation-core'\n * import { Text } from 'react-native'\n * import { ExtraLinkProps, GatsbyWebProps } from './types'\n *\n * const Link = React.forwardRef(\n * (\n * \tprops: LinkProps<ExtraLinkProps, GatsbyWebProps>,\n * \tref?: React.Ref<Text>\n * ) => {\n * \tconst Link = LinkMaker<ExtraLinkProps, GatsbyWebProps>()\n * \treturn <Link {...props} ref={ref} />\n * }\n * )\n *\n * export default React.memo(Link)\n * ```\n */\n\nconst LinkMaker = <\n  ExtraProps extends object = {},\n  Web extends object = {},\n  Params extends object = {}\n>() =>\n  React.forwardRef(\n    (props: LinkProps<ExtraProps, Web, Params>, ref?: React.Ref<Text>) => {\n      const { navigate } = useRouting()\n      const {\n        touchableOpacityProps = empty.object,\n        routeName,\n        params,\n        children,\n        isText = true,\n      } = props\n\n      const nav = useCallback(\n        () =>\n          navigate({\n            routeName: routeName || '/',\n            params,\n          }),\n        [navigate, routeName, params]\n      )\n\n      return (\n        <TouchableOpacity {...touchableOpacityProps} onPress={nav}>\n          {isText ? (\n            <Text ref={ref} style={props.style} accessibiltyRole=\"link\">\n              {children}\n            </Text>\n          ) : (\n            children\n          )}\n        </TouchableOpacity>\n      )\n    }\n  )\n\nexport default LinkMaker\n"]}