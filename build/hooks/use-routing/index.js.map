{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/hooks/use-routing/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAA;AAClE,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAA;AACnC,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAA;AAI3B,MAAM,QAAQ,GAAG,CAAC,SAAiB,EAAE,EAAE,GAAE,CAAC,CAAA;AAE1C,MAAM,CAAC,OAAO,UAAU,UAAU;IAIhC,MAAM,EACJ,QAAQ,EAAE,GAAG;IACb,aAAa;IACb,IAAI,EAAE,MAAM,EACZ,MAAM;IACN,aAAa;IACb,QAAQ,EACR,OAAO,EAAE,GAAG,EACZ,SAAS,GACV,GAAG,aAAa,EAAS,CAAA;IAE1B,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,EAAS,CAAA;IAEpC,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAqC,KAAS,EAAE,EAAE;QAChD,GAAG,CAAC;YACF,IAAI,EAAE,KAAK,CAAC,SAAS;YACrB,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,GAAG,EAAE,KAAK,CAAC,GAAG;SACf,CAAC,CAAA;IACJ,CAAC,EACD,CAAC,GAAG,CAAC,CACN,CAAA;IACD,MAAM,IAAI,GAAG,WAAW,CACtB,CAAqC,KAAS,EAAE,EAAE;QAChD,IAAI,MAAM;YAAE,MAAM,CAAC,KAAK,CAAC,CAAA;;YACpB,QAAQ,CAAK,KAAK,CAAC,CAAA;IAC1B,CAAC,EACD,CAAC,MAAM,EAAE,QAAQ,CAAC,CACnB,CAAA;IACD,MAAM,QAAQ,GAAG,CAAQ,KAAa,EAAE,QAAkB,EAAS,EAAE;QACnE,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAA;IACvC,CAAC,CAAA;IACD,MAAM,OAAO,GAAG,WAAW,CACzB,CAAqC,EAAE,SAAS,EAAE,MAAM,EAAM,EAAE,EAAE;QAChE,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;IACxB,CAAC,EACD,CAAC,GAAG,CAAC,CACN,CAAA;IAED,OAAO;QACL,QAAQ;QACR,QAAQ;QACR,IAAI;QACJ,MAAM,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE;QACtB,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,OAAO;QACP,SAAS;KACV,CAAA;AACH,CAAC","sourcesContent":["import { useNavigation, useRoute } from '@react-navigation/native'\nimport { useCallback } from 'react'\nimport * as _ from 'lodash'\nimport { NavigateTo } from '..'\nimport { DefaultRouteProp, DefaultNavigationProp } from './types'\n\nconst prefetch = (routeName: string) => {}\n\nexport default function useRouting<\n  RProp extends DefaultRouteProp = DefaultRouteProp,\n  NProp extends DefaultNavigationProp = DefaultNavigationProp\n>() {\n  const {\n    navigate: nav,\n    // @ts-ignore\n    push: pushTo,\n    goBack,\n    // @ts-ignore\n    popToTop,\n    replace: rep,\n    setParams,\n  } = useNavigation<NProp>()\n\n  const { params } = useRoute<RProp>()\n\n  const navigate = useCallback(\n    <To extends NavigateTo = NavigateTo>(route: To) => {\n      nav({\n        name: route.routeName,\n        params: route.params,\n        key: route.key,\n      })\n    },\n    [nav]\n  )\n  const push = useCallback(\n    <To extends NavigateTo = NavigateTo>(route: To) => {\n      if (pushTo) pushTo(route)\n      else navigate<To>(route)\n    },\n    [pushTo, navigate]\n  )\n  const getParam = <Param>(param: string, fallback?: unknown): Param => {\n    return _.get(params, param, fallback)\n  }\n  const replace = useCallback(\n    <To extends NavigateTo = NavigateTo>({ routeName, params }: To) => {\n      rep(routeName, params)\n    },\n    [rep]\n  )\n\n  return {\n    navigate,\n    getParam,\n    push,\n    goBack: () => goBack(),\n    params,\n    prefetch,\n    popToTop,\n    replace,\n    setParams,\n  }\n}\n"]}